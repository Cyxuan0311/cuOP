cmake_minimum_required(VERSION 3.14)
project(cuOP 
    VERSION 1.0.0
    DESCRIPTION "CUDA Operations Memory Management Library"
    LANGUAGES CXX CUDA
)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 查找CUDA
find_package(CUDA REQUIRED)
find_package(CUDAToolkit REQUIRED)

# 查找cuDNN (可选)
find_path(CUDNN_INCLUDE_DIR cudnn.h)
find_library(CUDNN_LIBRARY cudnn)

# 查找glog
find_package(PkgConfig REQUIRED)
pkg_check_modules(GLOG REQUIRED libglog)

# 查找jsoncpp
find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP REQUIRED jsoncpp)

# 包含CMake包配置助手
include(CMakePackageConfigHelpers)

# 设置CUDA架构
set(CMAKE_CUDA_ARCHITECTURES 75 80 86 89)

include_directories(
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/include/data
    ${CMAKE_SOURCE_DIR}/include/base
    ${CMAKE_SOURCE_DIR}/include/cuda_op
    ${CMAKE_SOURCE_DIR}/include/cuda_op/abstract
    ${CMAKE_SOURCE_DIR}/include/cuda_op/detail
    ${CMAKE_SOURCE_DIR}/include/cuda_op/detail/cuBlas
    ${CMAKE_SOURCE_DIR}/include/cuda_op/detail/cuDNN
    ${CMAKE_SOURCE_DIR}/include/jit
    ${CMAKE_SOURCE_DIR}/include/jit/Blas
    ${CMAKE_SOURCE_DIR}/include/performance
    ${GLOG_INCLUDE_DIRS}
    ${JSONCPP_INCLUDE_DIRS}
)

# 只在找到cuDNN时添加cuDNN包含目录
if(CUDNN_INCLUDE_DIR)
    include_directories(${CUDNN_INCLUDE_DIR})
endif()

# 基础源文件
set(BASE_SRC src/base/memory_pool.cu)

# JIT相关源文件
set(JIT_SRC 
    src/jit/jit_compiler.cu
    src/jit/global_jit_manager.cu
    src/jit/jit_persistent_cache.cu
    src/jit/Blas/gemm_jit_plugin.cu
    src/jit/Blas/gemv_jit_plugin.cu
    src/jit/Blas/trsm_jit_plugin.cu
    src/jit/Blas/gemm_batched_jit_plugin.cu
    src/jit/Blas/symm_herk_jit_plugin.cu
    src/jit/Blas/vector_ops_jit_plugin.cu
    src/jit/Blas/trmm_jit_plugin.cu
    src/jit/Blas/ger_jit_plugin.cu
    src/jit/Blas/blas_jit_plugin_manager.cu
)

# 性能监控相关源文件
set(PERFORMANCE_SRC
    src/performance/performance_monitor.cu
    src/performance/memory_analyzer.cu
    src/performance/hotspot_analyzer.cu
    src/performance/auto_tuner.cu
)

# cuBLAS相关源文件
file(GLOB SRC_CUBLAS src/cuda_op/detail/cuBlas/*.cu)
list(APPEND SRC_CUBLAS ${BASE_SRC})

# cuDNN相关源文件
file(GLOB SRC_CUDNN src/cuda_op/detail/cuDNN/*.cu)
list(APPEND SRC_CUDNN ${BASE_SRC})

# JIT库
add_library(cuop_jit SHARED ${JIT_SRC})
target_link_libraries(cuop_jit PRIVATE CUDA::cudart CUDA::nvrtc ${GLOG_LIBRARIES} z crypto stdc++fs)
target_include_directories(cuop_jit PRIVATE ${CMAKE_SOURCE_DIR}/include)
set_target_properties(cuop_jit PROPERTIES OUTPUT_NAME "cuop_jit" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")

# 性能监控库
add_library(cuop_performance SHARED ${PERFORMANCE_SRC})
target_link_libraries(cuop_performance PRIVATE CUDA::cudart CUDA::nvrtc ${GLOG_LIBRARIES} ${JSONCPP_LIBRARIES})
target_include_directories(cuop_performance PRIVATE ${CMAKE_SOURCE_DIR}/include)
set_target_properties(cuop_performance PROPERTIES OUTPUT_NAME "cuop_performance" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")

# cuBLAS动态库
add_library(cuop_cublas SHARED ${SRC_CUBLAS})
target_link_libraries(cuop_cublas PRIVATE CUDA::cublas ${GLOG_LIBRARIES})
target_include_directories(cuop_cublas PRIVATE ${CMAKE_SOURCE_DIR}/include)
set_target_properties(cuop_cublas PROPERTIES OUTPUT_NAME "cuop_cublas" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")

# 深度学习算子库 (自定义CUDA实现，不依赖cuDNN库)
add_library(cuop_cudnn SHARED ${SRC_CUDNN})
target_link_libraries(cuop_cudnn PRIVATE CUDA::cudart CUDA::cublas ${GLOG_LIBRARIES})
target_include_directories(cuop_cudnn PRIVATE ${CMAKE_SOURCE_DIR}/include)
set_target_properties(cuop_cudnn PROPERTIES OUTPUT_NAME "cuop_cudnn" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")
# 设置CUDA编译选项
set_target_properties(cuop_cudnn PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
target_compile_options(cuop_cudnn PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-Xptxas=-v>)
message(STATUS "Building cuop_cudnn library with custom CUDA implementations")

# ==================== 安装配置 ====================

# 设置安装前缀
if(NOT CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX "/usr/local")
endif()

# 安装动态库
install(TARGETS cuop_cublas cuop_cudnn cuop_jit cuop_performance
        EXPORT cuOPTargets
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin
        INCLUDES DESTINATION include)

# 安装头文件
install(DIRECTORY include/ 
        DESTINATION include
        FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp")

# 安装CMake配置文件
install(EXPORT cuOPTargets
        FILE cuOPTargets.cmake
        NAMESPACE cuOP::
        DESTINATION lib/cmake/cuOP)

# 创建并安装cuOPConfig.cmake
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cuOPConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cuOPConfig.cmake"
    @ONLY
)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cuOPConfig.cmake"
        DESTINATION lib/cmake/cuOP)

# 安装版本文件
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/cuOPConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cuOPConfigVersion.cmake"
        DESTINATION lib/cmake/cuOP)

# 安装示例和文档
install(DIRECTORY examples/
        DESTINATION share/cuOP/examples
        OPTIONAL)

install(DIRECTORY docs/
        DESTINATION share/cuOP/docs
        OPTIONAL)

# 安装pkg-config文件
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cuOP.pc.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cuOP.pc"
    @ONLY
)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cuOP.pc"
        DESTINATION lib/pkgconfig)

# 显示安装信息
message(STATUS "Installation paths:")
message(STATUS "  Libraries: ${CMAKE_INSTALL_PREFIX}/lib")
message(STATUS "  Headers: ${CMAKE_INSTALL_PREFIX}/include")
message(STATUS "  CMake config: ${CMAKE_INSTALL_PREFIX}/lib/cmake/cuOP")
message(STATUS "  pkg-config: ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")

# 添加JIT测试子目录
add_subdirectory(test/JIT_test)

# 添加性能监控测试子目录
add_subdirectory(test/performance)

# 添加示例目录
add_subdirectory(example)